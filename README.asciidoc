= Yggdrasil
Team 3161
v0.9.0, 10 January 2015
:sectanchors:

== What is this?
Yggdrasil is the name of the reusable FRC Java libraries which FRC 3161 provides,
free of charge and open to any usage (as permitted by the BSD 2-clause license),
based upon the software developed by 3161 for the 2014 season. For more information
about the team, or the robot for which this code was originally written, please
visit link:http://team3161.ca[3161's Homepage].

Pre-built JARs, ready to be included directly into your own FRC Java projects, are
available
link:http://cloud.team3161.ca/download/yggdrasil/[here]. You can also download a
'-all' ZIP, which contains the JARs for Yggdrasil's classes and its Javadoc
documentation - this is probably the easiest to deal with.
Build status (and alternative download links) are available
link:http://cloud.team3161.ca:8080/dashboard[here].
'Release' builds will be made available through the first
direct download link, rather than through CruiseControl, and will be named with
-RELEASE included in the JAR name.

Development for Yggdrasil happens on link:https://github.com/FRC3161/Yggdrasil[our GitHub].

Versions 0.8 and up are compatible with the 2015 FRC Control Systems Update and
Java 8. If for some reason you need to remain compatible with the previous Java
1.4 Micro Edition environment and the cRIO, you will need to use an older 0.2.x
version of Yggdrasil.

== Introduction
Yggdrasil is the name of the library which FRC 3161 uses and publishes for other
teams to use as they please.

Each package in this project is intended as a reusable module, with no specific
robot hardware configuration or design in mind. Each package provided by 3161 has
the prefix ca.team3161.lib, and all classes reside within these packages. Each
such class has at least skeleton documentation explaining its purpose, but for
ease of reference and a high-level overview, this document will explain the
concepts behind the Yggdrasil libraries.

== QuickStart

=== Download
See
link:http://cloud.team3161.ca/download/yggdrasil/latest[here] for the latest release
downloads. Pick a ZIP and download it! The ZIPs contain the compiled class JARs
as well as the corresponding Javadoc JAR, so this is probably the easiest way
to make sure that your documentation matches the library you've downloaded.
Once you've downloaded an '-all' ZIP, unzip it and take note of its contents.
Then, in your own robot project's main directory, create a subdirectory
(folder) called 'lib'. Copy the two Yggdrasil JARs into this new 'lib' folder.
Copy the 'eclipse-build.xml' into your own robot project directory and replace
the existing 'build.xml' by removing it, then renaming 'eclipse-build.xml' to
'build.xml'. You're all set and ready to go!

For an example of this, please see
link:https://github.com/FRC3161/Nidhoggr[Nidhoggr].

=== Documentation
Javadoc documentation for the latest release is available online
link:http://cloud.team3161.ca/download/yggdrasil/latest/javadoc[here].

=== Development
Do you want to help contribute to Yggdrasil? Awesome! Please visit our
link:https://github.com/FRC3161/Yggdrasil[GitHub]. From there you can fork Yggdrasil,
make changes to your copy, and submit pull requests. Please give us your name and
team number (if applicable) when you submit your pull request so we can give you
proper credit!

== Design
The design intended by these libraries are a main robot class, subclassed
from ThreadedAutoRobot, which defines the robot's behaviour in autonomous,
teleoperated, and disabled modes, in a manner very similar to the standard
IterativeRobot provided by FRC. This base class provides for a robot's
autonomous routine to be performed in a separate thread from the main robot
thread, allowing for a simpler, more straight-forward action scripting style,
without having to rely on myriad Timer objects.

Major component groups of the robot can be modelled as Subsystem subclasses,
which allows for components to be monitored and controlled in the background
by a new thread. This allows physical safety to be ensured, for example, by
having a background thread monitor a limit switch to ensure that a motor
controller shuts off, even if the main robot class' logic fails to check for
this condition.

For an example of a complete FRC robot software project using an earlier (and
no longer maintained) version of this library, please see
link:https://github.com/FRC3161/Iapetus2014[Iapetus].

== Other Libraries
Late in the 2014 season, 3161 forked Team 254's
link:https://github.com/Team254/CheesyVision[CheesyVision] library, and began
to experiment with using this functionality to enhance our own autonomous
routine with hotgoal detection. Parts of this forked repository are included
in this repository, as cheesyvision.py in the root and the src/com/team254
source directory. These have been modified from Team 254's originally published
versions.

== Class Overview
Javadocs for all of these classes are available
link:http://cloud.team3161.ca/download/yggdrasil/release/latest/javadoc[here
(latest release - click here if viewing this page on GitHub or from 3161's homepage)] or
link:./javadoc/index.html[here (the current build you're in -
click here if viewing this page through CruiseControl)].

//// TODO: remove these descriptions from this README and move them solely
//// into the javadocs

=== IO (ca.team3161.lib.utils.io)
File and DriverStation IO classes

==== DriverStationLCD
Provides a nice, readable implementation of a system to write to the digital
LCD display on the Driver Station software. Uses the same backend as FIRST's
official DriverStationLCD class.

=== Controls (ca.team3161.lib.utils.controls)
Interfaces and implementations for controllers for human operators to use

==== Gamepad
An interface defining a physical gamepad type controller. These are
expected to have two thumbsticks, a directional pad, and an assortment
of buttons. They may have additional functionality as well, but this
is the minimal set. The thumbsticks' Y-axes may optionally be inverted.

==== Joystick
A thin wrapper overtop of FIRST's provided Joystick class, offering
deadzone filtering and Y-axis inversion.

==== LogitechDualAction
A Gamepad implementation modelling the Logitech DualAction USB gamepad.
In addition to the methods required by the Gamepad interface, this
class offers convenience methods to check the "bumpers" and "triggers"
(shoulder buttons) on the controller. It also offers deadzone filtering,
so that very small values returned by the thumbsticks can be ignored, in
case the gamepad is not properly zeroed, or has damaged springs, etc.
The Y-axes of the thumbsticks may optionally be inverted.

=== General utilities (ca.team3161.lib.utils)
Assertions, PWM value validation, floating point rounding, etc.

==== Assert
Assertions. Contains static methods which take a boolean condition and
throw an exception if these conditions do not hold. Useful for debugging
and during development.

==== Utils
Pretty printing arrays, rounding doubles, and ensuring PWM values fall
within the range [-1.0, 1.0].

=== PID (ca.team3161.lib.robot.pid)
PID control libraries. If you don't know what PID is or what it's for,
take a look at link:http://team3161.ca/teamresources/[Team 3161's Resources] page.

==== AnglePidSrc
A PIDSrc which returns values as angles.

==== EncoderPidSrc
A PIDSrc which uses an Encoder as its backing sensor.

==== GyroPidSrc
An AnglePIDSrc which uses a Gyro as its backing sensor.

==== PID
A PID loop, which uses a PIDSrc and a set of constants to iteratively
determine output values with which a system can reach and maintain a
target value.

WARNING: Using PID control rather than operator control places the physical
safety and wellbeing of your robot and anybody near it in the hands of
the correctness of your PID system. Please ensure that your constants are
the correct sign (positive vs negative) and of reasonable order (start very,
very small) before using a PID-controlled system.

==== PIDSrc
An interface with a single method, getValue(). These are used as backing
sensors for PID objects. Encoders, Gyros, Potentiometers, Accelerometers,
and Rangefinders are examples of backing sensors that can be usefully
wrapped by a class implementing PIDSrc.

==== PIDulum
A PID loop for the specific application of an inverted pendulum system.
This works the same as a standard PID, but with an additional "Feed
Forward" term, which is used to compensate for gravity pulling on the
pendulum.

==== PotentiometerPidSrc
An AnglePIDSrc that uses two known points (voltage, angle) of a rotary
potentiometer and is able to then convert measured voltages into
corresponding angles. Generally the two known points will be the
endpoints of the degrees of freedom of whatever system this sensor
is monitoring. The angles are arbitrarily defined by the user, and
all returned angles will simply scale between these end points, so long
as the arbitrarily defined endpoint angles have correctly measured
corresponding voltages.

WARNING: Be absolutely sure that you have correctly measured and entered
the range of motion endpoints of your physical system. Depending on
the potentiometer you use and the way it is mounted, your "higher angle"
may actually have a lower voltage. This is not a problem and you should
not try to correct it by swapping the voltages between endpoints when you
instantiate a PotentiometerPidSrc, as this would result in your system
moving in reverse.

=== Robot subsystems (ca.team3161.lib.robot)
Higher level components and control systems defining major pieces of
a robot.

==== Drivetrain
A container object which groups heterogenous SpeedControllers and
allows them to be managed as a unit. For example, a robot might use
two Victors and two Talons to control its drive motors. Two
Drivetrain object could then be constructed, each controlling one
side of the robot, and managing one Victor and one Talon. These
Drivetrain objcets can then be used in the robot code in the same
manner as a Talon or Victor would be, but now only one method call
needs to be performed rather than two for each change required to
each side of the robot's drive controllers.

==== PIDDrivetrain
A Drivetrain controller that uses PID objects and is able to accurately
drive straight and turn by degrees. This is a type of Subsystem - the
PID control is done in a background thread. In particular, two
SpeedController instances are controlled, with two Encoders used to
measure travelled distance, and a Gyro used to ensure a straight course
while driving. The Gyro can also be used to orient the robot to face
a specific direction.

==== ResourceTracker
A system allowing Subsystems to safely operate concurrently without
using the same resources (such as SpeedControllers, sensors, relays)
and being interrupted by other subsystems. Any Subsystem will, before
running its task, attempt to acquire all resources listed using
require() in its defineResources() method. If any of these resources
cannot be acquired in a timely fashion, the task skips this iteration
and retries again later. If only a subset of its required resources were
acquired, or if the task successfully runs, then it releases all
resources until its next run. Resources may fail to be required if
they are currently held by other running Subsystem tasks.

==== Subsystem
Subsystems are objects that model major physical component subsystems
on robots. Subsystems have a list of required resources and a task
that they run in the background. This task can be run once or
periodically. If being run periodically, the wait time between iterations
is configurable. A Subsystem might be given references to, or contain
instances of, PID objects and SpeedControllers (Drivetrain instances,
perhaps!), and could then be used to implement PID-controlled driving,
without having to rely on using any timers or explicitly writing any
looping behaviour to iteratively calculate PID targets. Subsystem is
an abstract class and so a Subsystem's actual concrete behaviour can
vary greatly between different subclasses.

WARNING: Failure to require() the correct resources in
defineResources() may lead to concurrency issues and indeterminate
behaviour. Ensure that all of your Subsystems require() all of their
resources.

==== ThreadedAutoRobot
A subclass of IterativeRobot. Autonomous is run in a new Thread,
leaving the main robot thread responsible (generally) solely for
handling FMS events, Watchdog, etc. This allows autonomous scripts
to use convenient semantics such as Thread sleeping rather than
periodically checking Timer objects. A method "waitFor" is supplied
which should be used in favour of Thread.sleep as it provides assurances
that the autonomous script will not run over the length of the autonomous
period. As a replacement for teleopPeriodic, the new method
teleopThreadsafe should be used. Use of this method ensures that the
autonomous background thread and the main robot thread (running teleop
code) will not coexist, which would cause indeterminate runtime
behaviour.
